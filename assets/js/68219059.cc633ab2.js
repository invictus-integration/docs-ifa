"use strict";(self.webpackChunkinvictus_integration=self.webpackChunkinvictus_integration||[]).push([[503],{815:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/pseudo-logic-app-workflow-runs-w-time-sequencer-3216ab30ad36daac87c10fe4358dd335.png"},2630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"framework/timesequencer","title":"Run Logic App workflows in sequence by timestamps with the <u>Time Sequencer</u>","description":"At the time of writing, there is no built-in way in Azure Logic Apps to \'control\' the sequence in which multiple workflow runs are executing. In certain scenarios, even though a  workflow was triggered before another, you want the first one to wait for the second. A common example is entity updates, where you don\'t want older updates to override newer ones - even though the workflow with the older updates \'happened after\' the newer ones.","source":"@site/versioned_docs/version-v6.0.0/framework/timesequencer.md","sourceDirName":"framework","slug":"/framework/timesequencer","permalink":"/docs-ifa/framework/timesequencer","draft":false,"unlisted":false,"editUrl":"https://github.com/invictus-integration/docs-ifa/edit/master/docs/versioned_docs/version-v6.0.0/framework/timesequencer.md","tags":[],"version":"v6.0.0","frontMatter":{"sidebar_label":"Time-controlled sequence"},"sidebar":"sidebar","previous":{"title":"Index-controlled sequence","permalink":"/docs-ifa/framework/sequencecontroller"},"next":{"title":"Full Transco V2 Example","permalink":"/docs-ifa/framework/transcoV2-Example"}}');var o=t(4848),i=t(8453);const s={sidebar_label:"Time-controlled sequence"},c="Run Logic App workflows in sequence by timestamps with the Time Sequencer",l={},a=[{value:"Available endpoints",id:"available-endpoints",level:2},{value:"\u231b Wait for execution",id:"-wait-for-execution",level:2},{value:"\u2611\ufe0f Complete execution",id:"\ufe0f-complete-execution",level:2},{value:"Customization",id:"customization",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsxs)(n.h1,{id:"run-logic-app-workflows-in-sequence-by-timestamps-with-the-time-sequencer",children:["Run Logic App workflows in sequence by timestamps with the ",(0,o.jsx)("u",{children:"Time Sequencer"})]})}),"\n",(0,o.jsxs)(n.admonition,{title:"motivation",type:"note",children:[(0,o.jsx)(n.p,{children:"At the time of writing, there is no built-in way in Azure Logic Apps to 'control' the sequence in which multiple workflow runs are executing. In certain scenarios, even though a  workflow was triggered before another, you want the first one to wait for the second. A common example is entity updates, where you don't want older updates to override newer ones - even though the workflow with the older updates 'happened after' the newer ones."}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Time Sequencer"})," is a Framework component that allows you by interacting with HTTP endpoints to set up sequences, controlled by custom timestamps, to ensure that workflows are run in a time-controlled fashion. Sequence information is stored in an Azure Blob Storage container, called ",(0,o.jsx)(n.code,{children:"invictustimesequencer"}),"."]})]}),"\n",(0,o.jsx)(n.h2,{id:"available-endpoints",children:"Available endpoints"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#wait-for-execution",children:(0,o.jsx)(n.code,{children:"/api/WaitForExecution"})}),": by sending a request, it allows the currently running Azure Logic App workflow to possibly 'halt' its execution until it is their time to run actions."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.a,{href:"#complete-execution",children:[(0,o.jsx)(n.code,{children:"/api/CompleteExecution"}),":"]})," by sending a request, it flags the currently running Azure Logic App workflow as 'completed', so that the next workflow run can continue to run."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Pseudo Azure Logic App setup with Time Sequencer component",src:t(3880).A+"",width:"825",height:"740"})}),"\n",(0,o.jsxs)(n.p,{children:["The idea is that workflows are processed in sequence after the ",(0,o.jsx)(n.strong,{children:"Wait"}),". The place between the ",(0,o.jsx)(n.strong,{children:"Wait"})," and ",(0,o.jsx)(n.strong,{children:"Complete"})," task allows you to place your own logic that needs to run in order. If workflow 1 uses a custom timestamp that happened 'earlier' than the one used in workflow 2, the second workflow will wait for the first workflow."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Pseudo Azure Logic App workflow runs with Time Sequencer component",src:t(815).A+"",width:"1287",height:"217"})}),"\n",(0,o.jsx)(n.h2,{id:"-wait-for-execution",children:"\u231b Wait for execution"}),"\n",(0,o.jsxs)(n.p,{children:["By using an Azure Logic Apps ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/connectors/connectors-native-webhook?tabs=standard#add-an-http-webhook-trigger",children:"HTTP webhook"})," to send a HTTP POST request to ",(0,o.jsx)(n.code,{children:"/api/WaitForExecution"})," endpoint, the ",(0,o.jsx)(n.strong,{children:"Time Sequencer"})," component can queue a workflow run signal the run when it can continue. Determining the order of workflow runs can be achieved by passing a custom ",(0,o.jsx)(n.code,{children:"Timestamp"})," with the request body."]}),"\n",(0,o.jsx)(n.p,{children:"The following request parameters need to be supplied in the request body:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"JSON property"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Required"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"SequenceName"})}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"yes"}),(0,o.jsx)(n.td,{children:"Transactional name of 'sequence' to group all Azure Logic App workflow runs that need to be run in sequence (same across workflow runs)."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"InstanceId"})}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"yes"}),(0,o.jsx)(n.td,{children:"Unique operational ID within the 'sequence' of a single Azure Logic App workflow run (unique for each workflow run)."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Timestamp"})}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"yes"}),(0,o.jsx)(n.td,{children:"Date time to control the order of the Azure Logic App workflows in the 'sequence'."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"CallbackUri"})}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"yes"}),(0,o.jsxs)(n.td,{children:["Should be supplied by the HTTP WebHook Azure Logic App action: ",(0,o.jsx)(n.code,{children:"@{listCallbackUrl()}"}),"."]})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-complete-execution",children:"\u2611\ufe0f Complete execution"}),"\n",(0,o.jsxs)(n.p,{children:["When the ",(0,o.jsxs)(n.a,{href:"#wait-for-execution",children:[(0,o.jsx)(n.em,{children:"Wait for exec."})," operation"]})," responds with ",(0,o.jsx)(n.code,{children:"Start"}),", then any custom user actions in the Azure Logic App workflow can be executed. Once those are done, the workflow should signal the ",(0,o.jsx)(n.strong,{children:"Time Sequencer"})," component, so that any waiting workflows can continue their execution."]}),"\n",(0,o.jsxs)(n.p,{children:["Signaling completion happens with a HTTP POST request to the ",(0,o.jsx)(n.code,{children:"/api/CompleteExecution"})," endpoint, using following required request parameters in the request body:"]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"JSON property"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Required"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"SequenceName"})}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"yes"}),(0,o.jsx)(n.td,{children:"Transactional name of 'sequence' to group all Azure Logic App workflow runs that need to be run in sequence (same across workflow runs)."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"InstanceId"})}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"yes"}),(0,o.jsx)(n.td,{children:"Unique operational ID within the 'sequence' of a single Azure Logic App workflow run (unique for each workflow run)."})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,o.jsxs)(n.admonition,{title:"sequence cleanup",type:"info",children:[(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"Time Sequencer"})," component stores the Azure Logic App workflow 'sequences' in an Azure Blob Storage container, called ",(0,o.jsx)(n.code,{children:"invictustimesequencer"}),". The following policy rules are currently hardcoded on the Azure Storage Account in regards of cleaning these sequences:"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Move to cool storage"}),": greater than ",(0,o.jsx)(n.code,{children:"10 days"})," after modification."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Delete the blob"}),": greater than ",(0,o.jsx)(n.code,{children:"60 days"})," after modification."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Delete blob snapshot"}),": greater than ",(0,o.jsx)(n.code,{children:"90 days"})," after creation."]}),"\n"]}),(0,o.jsxs)(n.p,{children:["\ud83d\udd17 ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/storage/blobs/lifecycle-management-policy-configure?tabs=azure-portal",children:"More info on Azure Storage Account policies"})]})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.strong,{children:"Related Bicep parameters"})}),(0,o.jsxs)(n.p,{children:["The following Bicep parameters control the inner workings of the ",(0,o.jsx)(n.strong,{children:"Time Sequencer"})," component. See the ",(0,o.jsx)(n.a,{href:"/docs-ifa/framework/installation/",children:"release pipeline step of the deployment of the Invictus Framework"})," to learn more."]}),(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Bicep parameter"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"storageAccountName"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"invictus{resourcePrefix}store"})}),(0,o.jsxs)(n.td,{children:["The name of the Azure Storage Account (used by other Framework components as well) where the ",(0,o.jsx)(n.code,{children:"invictustimesequencer"})," Azure Blob Storage container will be located where Azure Logic App workflow sequences are stored."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"timeSequencerScaling"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"{ cpuResources: '0.5', memoryResources: '1.0Gi', scaleMaxReplicas: 1, scaleMinReplicas: 0, concurrentRequests: 10 }"})}),(0,o.jsxs)(n.td,{children:["The Container App options to control scaling. See ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/container-apps/scale-app?pivots=container-apps-bicep#custom",children:"scaling rules in Azure Container Apps"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"timesequencerFunctionName"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"inv-${resourcePrefix}-timesequencer"})}),(0,o.jsxs)(n.td,{children:["The name of the Azure Container App to be created for the ",(0,o.jsx)(n.strong,{children:"Time Sequencer"})," component."]})]})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},3880:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/pseudo-logic-app-w-time-sequencer-1a82656a272e2231c32d2fedbc1c18c4.png"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);