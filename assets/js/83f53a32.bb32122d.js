"use strict";(self.webpackChunkinvictus_integration=self.webpackChunkinvictus_integration||[]).push([[6112],{3972:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"framework/xsd-validator","title":"XSD Validator","description":"Motivation","source":"@site/versioned_docs/version-v6.0.0/framework/xsd-validator.md","sourceDirName":"framework","slug":"/framework/xsd-validator","permalink":"/framework/xsd-validator","draft":false,"unlisted":false,"editUrl":"https://github.com/invictus-integration/docs-ifa/edit/master/docs/versioned_docs/version-v6.0.0/framework/xsd-validator.md","tags":[],"version":"v6.0.0","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Json/Xml Converter","permalink":"/framework/xmljsonconverter"},"next":{"title":"v6 Migration Guide","permalink":"/support/v6-migration"}}');var s=t(4848),o=t(8453);const r={},a="XSD Validator",l={},d=[{value:"Motivation",id:"motivation",level:2},{value:"Usage",id:"usage",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"xsd-validator",children:"XSD Validator"})}),"\n",(0,s.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,s.jsxs)(n.p,{children:["When processing XML files in Logic App workflows, XSD validation is a necessary pre-processing step to catch errors beforehand. ",(0,s.jsxs)(n.a,{href:"https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-enterprise-integration-schemas?tabs=consumption",children:["Microsoft currently only supports XSD validation within Logic App workflows on top of ",(0,s.jsx)(n.strong,{children:"Azure Integration Accounts"})]}),". This kind of resource is rather expensive and therefore not always available within the cost boundaries of client projects."]}),"\n",(0,s.jsxs)(n.p,{children:["The Invictus Framework provides a ",(0,s.jsx)(n.strong,{children:"XSD Validator"})," component that allows you to validate XML files within your Logic App workflow by storing the XSD schemas in an Azure storage account. Circumventing the need of an expensive ",(0,s.jsx)(n.strong,{children:"Azure Integration Account"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"XSD Validator"})," is available as a HTTP endpoint in your Logic App workflow. XML input files should be supplied in a ",(0,s.jsx)(n.code,{children:"BASE64"})," format, XSD schema files should be stored in the Azure Blob storage container."]}),"\n",(0,s.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["XSD schema file(s), stored in the Azure Blob container ",(0,s.jsx)(n.code,{children:"xsdvalidatorstore"})," (available upon installation)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"input",children:"Input"}),"\n",(0,s.jsxs)(n.p,{children:["The request to the HTTP endpoint should contain both the ",(0,s.jsx)(n.code,{children:"BASE64"})," formatted XML input file, as well as the name of the XSD schema file, stored in the Azure Blob storage container."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// POST -> /api/ValidateXmlAgainstXsd\n{\n    "content": "<base64-encoded-input-xml>",\n    "xsdName": "<name-of-stored-schema-file>.xsd"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,s.jsx)(n.p,{children:"A successful HTTP response includes whether the schema validation was successful and any additional validation failures that were encountered."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// 200 OK <- /api/ValidateXmlAgainstXsd\n{\n    "isValid": false,\n    "exceptions": [\n        {\n            "message": "ex. The element \'student\' has invalid child element \'lastname\'. List of possible elements expected: \'firstname\'." \n        }\n    ]\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);